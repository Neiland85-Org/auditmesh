name: CI
on:
  push: { branches: ["**"] }
  pull_request: {}

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  pull-requests: write

jobs:
  quality:
    name: Lint • Tests • SCA • SBOM
    runs-on: ubuntu-latest
    env:
      ALLOW_TEST_FAILURES: "true"
      ALLOW_TYPE_ERRORS: "true"
      FAIL_ON_SECURITY: "false"
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Lint/Format/Types
        run: |
          uvx black --check .
          uvx isort --check-only .
          uvx flake8 .
          if [ "${ALLOW_TYPE_ERRORS}" = "true" ]; then
            uvx mypy --pretty || true
          else
            uvx mypy --pretty
          fi

      - name: Unit tests
        run: |
          if [ "${ALLOW_TEST_FAILURES}" = "true" ]; then
            uvx pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml || true
          else
            uvx pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml
          fi

      - name: Bandit (SAST)
        run: |
          uvx bandit -q -r . -f json -o bandit.json || true
          if [ "${FAIL_ON_SECURITY}" = "true" ]; then
            python -c "import json,sys; d=json.load(open('bandit.json')); (print('Bandit found issues') or sys.exit(1)) if d.get('results') else print('Bandit found no issues')"
          fi

      - name: Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/owasp-top-ten
            p/python

      - name: pip-audit
        run: |
          uvx pip-audit -f json -o pip_audit.json || true
          if [ "${FAIL_ON_SECURITY}" = "true" ]; then
            python -c "import json,sys; d=json.load(open('pip_audit.json')); (print('pip-audit found issues') or sys.exit(1)) if d else print('pip-audit no findings')"
          fi

      - name: Safety
        run: |
          uvx safety check -o safety.json --json || true
          if [ "${FAIL_ON_SECURITY}" = "true" ]; then
            python -c "import json,sys; d=json.load(open('safety.json')); (print('Safety found issues') or sys.exit(1)) if d.get('vulnerabilities') else print('Safety no findings')"
          fi

      - name: SBOM
        run: |
          uvx cyclonedx-bom -o sbom.json || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-artifacts
          path: |
            coverage.xml
            sbom.json
            pip_audit.json
            safety.json
            semgrep.sarif
            bandit.json
