src//components/Navbar.tsx:                key={link.href}
src//components/Navbar.tsx:                key={link.href}
src//components/EventConsole.tsx:                  <div key={index} className="flex items-center gap-2">
src//components/ServiceCard.tsx:        if (onClick && (e.key === 'Enter' || e.key === ' ')) {
src//components/v0dev/microservices/MetricsChart.tsx:                key={value}
src//components/v0dev/microservices/MetricsChart.tsx:                  key={s.id}
src//components/v0dev/microservices/MetricsChart.tsx:                <div key={s.id} className="text-center">
src//components/v0dev/microservices/EventForm.tsx:  const updateField = (field: keyof AuditEvent, value: any) => {
src//components/v0dev/V0DevDemo.tsx:              key={service.id}
src//lib/utils.ts:  defaultVariants?: Partial<Record<keyof T, keyof T[keyof T]>>
src//lib/utils.ts:  return (props: Partial<Record<keyof T, keyof T[keyof T]>> = {}) => {
src//lib/utils.ts:      .map(([key, value]) => variants[key]?.[value as string])
